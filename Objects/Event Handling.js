

// You are aware of event handlers in JavaScript which are invoked using inline scripting. This approach has a limitation of the tight coupling of the script code with the HTML element. 

// DOM API provides couple of ways to handle events in JavaScript using internal or external scripting. It segregates HTML elements completely from any JavaScript code. There are two different ways of doing this. 

// Suppose to listen to the click event on the HTML paragraph elements, given are two different ways of doing it. 

// Example: 

// HTML Code: 

// <p id="para1"> Para one of my page</p> 
// <p id="para2"> Para two of my page</p> 
// JS Code:  

document.getElementById('para1').onclick=function(){ 
        alert('Para one clicked'); 
} 
//OR   
document.getElementById('para2').addEventListener('click', function(){ 
        alert('Para two clicked');} 
,false); 
 

/////////////


// Events in JavaScript are considered as objects. 

// When events are fired, the 'event' object is generated by the browser. This object encapsulates all data related to that event. 

// To access or manipulate this object, it can optionally be passed as the first argument to the event handler function. 

// The properties of this object are as follows: 

// target

// type

// target Event Property:

// Refers to the HTML element that fired the event. 

// Example:

{/* <p id="para1" onclick="executeMe(event)"> Para one of my page</p>  */}

function executeMe(event) {
    alert(event.target.nodeName)
}
//alert box shows P ID="PARA1" 
 

// type Event Property:

// Tells the type of events that have taken place like click, load, etc. 

// Example: 

{/* <p id="para1" onclick="executeMe(event)"> Para one of my page</p> 
   
//alert box shows click


Methods:  */}
function executeMe(event) {
    alert(event.type)
}

// preventDefault()

// Cancels default action associated with HTML element and adds user-defined action  (if required). 

// For example, an element’s default action is to navigate to the given link. That action can be cancelled and some other action can be done instead.

// Usage: 

event.preventDefault();
 
 